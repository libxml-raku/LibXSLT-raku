use v6;
#  -- DO NOT EDIT --
# generated by: ../LibXML-p6/etc/generator.p6 --mod=LibXSLT --lib=XSLT etc/libxslt-api.xml

unit module LibXSLT::Native::Gen::numbersInternals;
# Implementation of the XSLT number functions:
#    Implementation of the XSLT number functions 
use LibXML::Native::Defs :xmlCharP;
use LibXSLT::Native::Defs :$lib;

class xsltFormatNumberInfo is repr('CStruct') {
    has int32 $.integer_hash; # Number of '#' in integer part
    has int32 $.integer_digits; # Number of '0' in integer part
    has int32 $.frac_digits; # Number of '0' in fractional part
    has int32 $.frac_hash; # Number of '#' in fractional part
    has int32 $.group; # Number of chars per display 'group'
    has int32 $.multiplier; # Scaling for percent or permille
    has byte $.add_decimal; # Flag for whether decimal point appears in pattern
    has byte $.is_multiplier_set; # Flag to catch multiple occurences of percent/permille
    has byte $.is_negative_pattern; # Flag for processing -ve prefix/suffix
}

class xsltNumberData is repr('CStruct') {
    has xmlCharP $.level;
    has xmlCharP $.count;
    has xmlCharP $.from;
    has xmlCharP $.value;
    has xmlCharP $.format;
    has int32 $.has_format;
    has int32 $.digitsPerGroup;
    has int32 $.groupingCharacter;
    has int32 $.groupingCharacterLen;
    has xmlDoc $.doc;
    has xmlNode $.node;
    has xsltCompMatch $.countPat;
    has xsltCompMatch $.fromPat; # * accelerators *
}
